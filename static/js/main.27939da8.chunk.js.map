{"version":3,"sources":["sessionClockMachine.js","ClockDisplay.js","Footer.js","SessionClock.js","reportWebVitals.js","index.js"],"names":["sessionClockMachine","createMachine","id","initial","context","session_length","break_length","session_time","break_time","states","paused","on","INC_SESSION","internal","cond","ctx","actions","DEC_SESSION","INC_BREAK","DEC_BREAK","RESET","START","counting","session","invoke","src","always","target","exit","break","hist","type","PAUSE","DEC_SESSION_TIME","DEC_BREAK_TIME","send","reset","assign","inc_session_length","dec_session_length","inc_break_length","dec_break_length","rewind_session","rewind_break","dec_session_time","dec_break_time","services","session_timer","_","__","callback","setInterval","clearInterval","break_timer","ClockDisplay","state","formatTime","display","value","historyValue","current","seconds","sec","toString","min","Math","floor","length","replace","Footer","href","rel","SessionClock","useMachine","useState","isOn","setIsOn","useEffect","sound","audioEl","currentTime","playPromise","play","undefined","then","catch","error","console","log","playSound","useRef","className","onClick","hasOwnProperty","pause","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27939da8.chunk.js","sourcesContent":["import { createMachine, assign, send } from \"xstate\";\n\nconst sessionClockMachine = createMachine({\n    id: 'sessionClock',\n    initial: 'paused',\n    context: {\n        // time in seconds\n        session_length: 25,\n        break_length: 5,\n        session_time: 25 * 60,\n        break_time: 5 * 60\n    },\n    states: {\n        paused: {\n            id: 'paused',\n            on: {\n                // set session/break times:\n                INC_SESSION: {\n                    internal: true,  // internal transition to check condition\n                    cond: (ctx) => ctx.session_length < 60,\n                    actions: 'inc_session_length'\n                },\n                DEC_SESSION: {\n                    internal: true,  \n                    cond: (ctx) => ctx.session_length > 1,\n                    actions: 'dec_session_length'\n                },\n                INC_BREAK: {\n                    internal: true,\n                    cond: (ctx) => ctx.break_length < 60,\n                    actions: 'inc_break_length'\n                },\n                DEC_BREAK: {\n                    internal: true,  \n                    cond: (ctx) => ctx.break_length > 1,\n                    actions: 'dec_break_length'\n                },\n                RESET: { actions: 'reset' },\n                // start clock\n                START: 'counting.hist'\n            },\n        },\n        counting: {\n            id: 'counting',\n            initial: 'session',\n            states: {\n                session: {\n                    invoke: { src: 'session_timer' },\n                    always: {\n                        target: 'break',\n                        cond: (ctx) => ctx.session_time < 0\n                    },\n                    exit: 'rewind_break'\n                },\n                break: {\n                    invoke: { src: 'break_timer' },\n                    always: {\n                        target: 'session',\n                        cond: (ctx) => ctx.break_time < 0\n                    },\n                    exit: 'rewind_session'\n                },\n                hist: { type: 'history' }\n            },\n            on: {\n                PAUSE: 'paused',\n                DEC_SESSION_TIME: { actions: 'dec_session_time' },\n                DEC_BREAK_TIME: { actions: 'dec_break_time' },\n                RESET: {\n                    target: ['counting.session'],      // reset machine to counting.session for the next start...\n                    actions: [send('PAUSE'), 'reset']  // then pause it and reset times to default\n                }\n            }\n        }\n    }\n}, {\n    actions: {\n        // reset to default time values:\n        reset: assign({\n            session_length: 25,\n            break_length: 5,\n            session_time: 25 * 60,\n            break_time: 5 * 60\n        }),\n        // set session and break lengths: \n        inc_session_length: assign({\n            session_time: (ctx) => (ctx.session_length + 1) * 60,\n            session_length: (ctx) => ctx.session_length + 1,\n        }),\n        dec_session_length: assign({\n            session_time: (ctx) => (ctx.session_length - 1) * 60,\n            session_length: (ctx) => ctx.session_length - 1,\n        }),\n        inc_break_length: assign({\n            break_time: (ctx) => (ctx.break_time + 1) * 60,\n            break_length: (ctx) => ctx.break_length + 1\n        }),\n        dec_break_length: assign({\n            break_time: (ctx) => (ctx.break_time - 1) * 60,\n            break_length: (ctx) => ctx.break_length - 1\n        }),\n        // rewind session time (on break exit) \n        rewind_session: assign({\n            session_time: (ctx) => (ctx.session_length) * 60\n        }),\n        // rewind break time (on session exit)\n        rewind_break: assign({\n            break_time: (ctx) => (ctx.break_length) * 60\n        }),\n        // decrement session/break times by 1 sec \n        // (actions called repeatedly by setInterval() in session_timer and break_timer services):\n        dec_session_time: assign({\n            session_time: (ctx) => ctx.session_time -= 1\n        }),\n        dec_break_time: assign({\n            break_time: (ctx) => ctx.break_time -= 1\n        })\n    },\n    services: {\n        session_timer: (_, __) => (callback, _) => {\n            const id = setInterval(() => callback('DEC_SESSION_TIME'), 1000);\n            return () => clearInterval(id)\n        },\n        break_timer: (_, __) => (callback, _) => {\n            const id = setInterval(() => callback('DEC_BREAK_TIME'), 1000);\n            return () => clearInterval(id)\n        }\n    }\n})\n\nexport default sessionClockMachine;","import PropTypes from 'prop-types';\n\nexport default function ClockDisplay({ state }) {\n    // on 'paused' state, displays sesssion or break time depending on state.historyValue \n    // (i.e., what was the previous state)\n    function display() {\n        let display = state.context.session_time;\n        if (state.value === 'paused') {\n            if (state.historyValue) {\n                state.historyValue.states.counting.current === 'break' \n                ? display = state.context.break_time\n                : display = state.context.session_time\n            }\n        }\n        if (state.value.counting === 'break') {\n            display = state.context.break_time\n        }\n        return display\n    }\n\n    return (\n            <span id=\"time-left\">{formatTime(display())}</span> // DISPLAY TIME REMAINING\n    )\n}\n\nClockDisplay.propTypes = {\n    state: PropTypes.object.isRequired\n}\n\n// helper function, convert number of seconds in mm:ss format:\nfunction formatTime(seconds) {\n    let sec = (seconds % 60).toString();\n    let min = seconds === 3600\n        ? 60 // display 60 min if sec === 3600\n        : Math.floor((seconds / 60) % 60).toString();\n    if (sec.length === 1) { sec = '0' + sec }\n    if (min.length === 1) { min = '0' + min }\n    return (min + ':' + sec).replace(/-1:-1/, '00:00')\n}","export default function Footer() {\n    return (\n        <footer>\n            <p>Marco Costa 2021. The <a href=\"https://github.com/marcocosta1618/Session-Clock\" target=\"_blank\" rel=\"noreferrer\">code of this app</a> is hosted at GitHub. \n            Functional model of the <a href=\"https://xstate.js.org/viz/?gist=8ee2c8d13d3863ac307f57535e0e84ca\" target=\"_blank\" rel=\"noreferrer\">calculator's state machine</a> on <a href=\"https://xstate.js.org/viz/\" target=\"_blank\" rel=\"noreferrer\">Xstate Visualizer</a>.</p>\n        </footer>\n    )\n}","import { useMachine } from '@xstate/react';\nimport sessionClockMachine from './sessionClockMachine.js';\nimport { useState, useEffect, useRef } from 'react';\nimport ClockDisplay from './ClockDisplay.js';\nimport Footer from './Footer';\nimport './style/SessionClock.css';\n\nfunction SessionClock() {\n  const [state, send] = useMachine(sessionClockMachine); // state-machine\n\n  const [isOn, setIsOn] = useState(false); // timer START/STOP button state\n\n  function clockStartStop() {\n    if (isOn) {\n      send({ type: 'PAUSE' })\n      setIsOn(false)\n    } else {\n      send({ type: 'START' })\n      setIsOn(true)\n    }\n  }\n  // if 'RESET' button is pressed, set (timer START/STOP) button to 'START' \n  useEffect(() => {\n    if (state.value === 'paused' && isOn) {\n      setIsOn(false)\n    }\n  }, [state.value, isOn])\n\n  // play sound on session/break end:\n  useEffect(() => {\n    if ((state.context.session_time === 0) || (state.context.break_time === 0)) {\n      playSound();\n    }\n  }, [state.context.session_time, state.context.break_time])\n\n  // AUDIO\n  const audioEl = useRef(null);\n\n  function playSound() {\n    // play sound (and prevent promise errors when running\n    // FCC test suite in Chrome):\n    const sound = audioEl.current;\n    sound.currentTime = 0;\n    let playPromise = sound.play();\n    if (playPromise !== undefined) {\n      playPromise.then(_ => { })\n        .catch(error => {\n          console.log(error);\n        })\n    }\n  }\n  // stop sound on reset\n  function onReset() {\n    const sound = audioEl.current;\n    sound.pause();\n    sound.currentTime = 0;\n    // send RESET to machine\n    send({ type: 'RESET' });\n  }\n\n  return (\n    <>\n      <h1>Session Clock</h1>\n      <div className='settings'>\n        <div className='session-settings'>\n          {/* send decrement/increment session_length to machine */}\n          <button id='session-increment' onClick={() => send({ type: 'INC_SESSION' })}>increment</button>\n          <div id='session-label'>SESSION LENGTH:\n            <span id='session-length'>{(state.context.session_length)}</span>\n          </div>\n          <button id='session-decrement' onClick={() => send({ type: 'DEC_SESSION' })}>decrement</button>\n        </div>\n\n        <div className='break-settings'>\n          {/* send decrement/increment break_length to machine */}\n          <button id='break-increment' onClick={() => send({ type: 'INC_BREAK' })}>increment</button>\n          <div id='break-label'>BREAK LENGTH:\n            <span id='break-length'>{(state.context.break_length)}</span>\n          </div>\n          <button id='break-decrement' onClick={() => send({ type: 'DEC_BREAK' })}>decrement</button>\n        </div>\n      </div>\n\n      <span id='timer-label'> {/* displaying current state */}\n        {!(state.value.hasOwnProperty('counting'))\n          ? 'STOP'\n          : state.value.counting === 'session'\n            ? 'SESSION'\n            : 'BREAK'}\n      </span>\n\n      <ClockDisplay state={state} ></ClockDisplay>\n      <div className=\"startStopReset\">\n        <button id='start_stop' onClick={() => clockStartStop()}> {isOn ? 'STOP' : 'START'}</button>\n        <button id='reset' onClick={onReset}> RESET</button>\n      </div>\n      <Footer />\n      <audio id='beep' ref={audioEl} src='./sounds/gongCsharp7.wav'>\n      </audio>\n    </>\n  );\n}\n\nexport default SessionClock;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SessionClock from './SessionClock';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SessionClock />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}